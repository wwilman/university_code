#!/usr/bin/env python
import numpy as np
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
from tkinter import *

"""
Własność Uniwersytetu Przyrodniczego we Wrocławiu
Autorzy: Gustaw Walaś, Wiktoria Wilman pod opieką prof Wojciecha Jakubowskiego
Interface do projektu model SIR na zajęcia Pracownia Informatyczna w roku akademickim 2020/2021
"""

from random import randint
class aplikacja:
    def __init__(self, frame):
        self.frame=frame
        self.frame.title("MODEL SIR")
        self.height = (self.frame.winfo_height())*1500
        self.width = (self.frame.winfo_width())*1500
        self.frame.geometry(f'{self.height}x{self.width}')
        self.lab1 = Label(self.frame, text="Wybierz państwo")
        self.lab1.grid(row=0,column=2)
        self.variable = StringVar(self.frame)
        self.OPTIONS = [
            "Polska",
            "Anglia",
            "Niemcy"
        ]
        self.variable.set(self.OPTIONS[0])  # default value
        self.w = OptionMenu(self.frame, self.variable, *self.OPTIONS)
        self.w.grid(row=1,column=2)
        self.lab2 = Label(self.frame, text="Wybierz dzień")
        self.lab2.grid(row=2, column=2)
        self.wday = StringVar(self.frame)
        self.OPTIONSday = [
            "1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"
        ]
        self.wday.set(self.OPTIONSday[0])  # default value
        self.wday = OptionMenu(self.frame, self.wday, *self.OPTIONSday)
        self.wday.grid(row=3, column=2)
        self.lab3 = Label(self.frame, text="Wybierz miesiąc")
        self.lab3.grid(row=4,column=2)
        self.wmonth = StringVar(self.frame)
        self.OPTIONSmonth = [
            "1","2","3","4","5","6","7","8","9","10","11","12"
        ]
        self.wmonth.set(self.OPTIONSmonth[0])  # default value
        self.wmonth = OptionMenu(self.frame, self.wmonth, *self.OPTIONSmonth)
        self.wmonth.grid(row=5, column=2)
        self.lab4 = Label(self.frame, text="Wybierz rok")
        self.lab4.grid(row=6, column=2)
        self.wyear = StringVar(self.frame)
        self.OPTIONSyear = [
            "2019", "2020", "2021"
        ]
        self.wyear.set(self.OPTIONSyear[0])  # default value
        self.wyear = OptionMenu(self.frame, self.wyear, *self.OPTIONSyear)
        self.wyear.grid(row=7, column=2)
        self.lc = 3
        self.but1=Button(self.frame, text="Stwórz wykres zachorowań", command=self.potegowanie).grid(row=8,column=2)
        self.butclean = Button(self.frame, text="Cofnij ostatni wykres", command=self.clean).grid(row=9,column=2)
        self.but2=Button(self.frame, text="Chcesz wyjść?", command=self.quit).grid(row=10,column=2)
        

    def on_resize(self,event):
        # determine the ratio of old width/height to new width/height
        wscale = float(event.width)/self.width
        hscale = float(event.height)/self.height
        self.width = event.width
        self.height = event.height
        # resize the canvas
        self.config(width=self.width, height=self.height)
        # rescale all the objects tagged with the "all" tag
        self.scale("all",0,0,wscale,hscale)

    def potegowanie(self):
        try:
            self.start = randint(1,10)
            self.end = randint(11,20)
            self.lc=self.lc+1
            if self.lc > 7:
                self.window=Tk()
                self.window.title("Zbyt dużo wykresów")
                self.labs1 = Label(self.window, text="Do porównania używamy tylko czterech wykresów.")
                self.labs1.grid(row=0, column=2)
                self.labs2 = Label(self.window, text="Wybierz co chcesz zrobić?")
                self.labs2.grid(row=1, column=2)
                self.buts1 = Button(self.window, text="Pozostań przy obecnych wykresach", command=self.bye).grid(row=2, column=1)
                self.butsclean = Button(self.window, text="Cofnij ostatni wykres", command=self.cleanw).grid(row=2, column=2)
                self.buts2 = Button(self.window, text="Chcesz wyjść?", command=self.quitw).grid(row=2, column=3)
                self.window.mainloop()
            self.dane=[]
            self.potegi = []
            self.liczby = []
            if self.start > 0:
                self.tyl()
            self.fig = Figure(figsize=((self.width/250),(self.height/250)))
            self.wykres = self.fig.add_subplot(111)
            a=self.wykres.scatter(self.liczby, self.potegi, color='blue')
            b=self.wykres.scatter(self.liczby, self.liczby, color='red')
            self.wykres.invert_yaxis()
            self.wykres.set_title(self.variable.get(), fontsize=16)
            self.wykres.set_ylabel("Ilość osób", fontsize=14)
            self.wykres.set_xlabel("Dzień", fontsize=14)
            self.wykres.set_xlim(min(self.liczby) - (0.05 * (min(self.liczby))), (max(self.potegi) + (0.05 * (max(self.potegi)))))
            self.wykres.set_ylim(min(self.liczby) - (0.05 * (min(self.liczby))), (max(self.potegi) + (0.05 * (max(self.potegi)))))
            handles = [a,b]
            labels = ['Zachorowania', 'Śmiertelność']
            self.wykres.legend(handles,labels)
            if self.lc > 5:
                self.canvas = FigureCanvasTkAgg(self.fig, self.frame)
                self.canvas.draw()
                self.canvas.get_tk_widget().grid(row=12, column=self.lc-2)
            else:
                self.canvas = FigureCanvasTkAgg(self.fig, self.frame)
                self.canvas.draw()
                self.canvas.get_tk_widget().grid(row=11,column=self.lc)
        except ValueError:
            self.wstart.delete(0000000000000000000000000000000000000)
            self.wend.delete(0000000000000000000000000)
            self.er=Tk()
            self.er.title("Błędnie wprowadzone dane")
            self.labse1 = Label(self.er, text="Wprowadzone dane nie są typu int ani float - wprowadź liczby!")
            self.labse1.grid(row=0, column=2)
            self.labse2 = Label(self.er, text="Wybierz co chcesz zrobić?")
            self.labse2.grid(row=1, column=2)
            self.butse1 = Button(self.er, text="Wprowadź dane jeszcze raz", command=self.byee).grid(row=2, column=1)
            self.butse2 = Button(self.er, text="Chcesz wyjść?", command=self.quite).grid(row=2, column=3)

    def tyl(self):
        while self.start < self.end:
            self.pot = self.start ** 2
            self.potegi.append((self.pot))
            self.liczby.append(self.start)
            self.start = self.start + (0.1 * self.start)

    def clean(self):
        self.lc=self.lc-1
        self.canvas.get_tk_widget().destroy()


    def quit(self):
        self.frame.destroy()

    def cleanw(self):
        self.lc=self.lc-2
        self.canvas.get_tk_widget().destroy()
        self.window.destroy()


    def quitw(self):
        self.window.destroy()
        self.frame.destroy()

    def bye(self):
        self.window.destroy()

    def quite(self):
        self.er.destroy()
        self.frame.destroy()

    def byee(self):
        self.er.destroy()



root = Tk()
aplikacja(root)
root.mainloop()
